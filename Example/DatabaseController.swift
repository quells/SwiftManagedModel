//
//  DatabaseController.swift
//  SQLiteTest
//
//  Created by Kai Wells on 8/10/14.
//  Copyright (c) 2014 Kai Wells. All rights reserved.
//

import Foundation

public class DatabaseController {
    
    /**
    Static SQLiteDB instance.
    */
    internal var db = SQLiteDB.sharedInstance()
    
    /**
    Deletes database file, then copies a fresh SQLite database file to replace it.
    
    Useful for testing but NOT RECOMMENDED for production use.
    */
    public func newDatabase() {
        db.deleteDatabase()
        let resetDB = db.didResetDatabase()
        var msg: String = resetDB.succeeded ? "SQLiteDB - DB reset." : "Error: \(resetDB.error.localizedDescription)"
        println(msg)
    }
    
    // MARK: - Insert / Remove
    
    /**
    Runs `object.shouldInsert()` and executes the autogenerated insert command in SQLiteDB if it returns true.
    
    :param: object Model object to be inserted into the table.
    */
    public func insertModelObject(object: Model) {
        if object.shouldInsert() {
            db.execute(object.insertCommand())
        }
    }
    
    /**
    See `insertModelObject()`.
    
    Because function programming.
    Alternatively: `[Model].map { dbController.insertModelObject($0) }`
    
    :param: objects Array of Model objects to be inserted into the table.
    */
    public func insertModelObjects(objects: [Model]) {
        objects.filter {
            $0.shouldInsert()
            }.map {
                $0.insertCommand()
            }.map {
                self.db.execute($0)
        }
    }
    
    /**
    Runs `object.shouldDelete()` and executes the autogenerated delete command in SQLiteDB if it returns true.
    
    :param: object Model object to be deleted from the table.
    */
    public func removeModelObject(object: Model) {
        if object.shouldDelete() {
            db.execute(object.deleteCommand())
        }
    }
    
    // MARK: - Fetch
    
    /**
    The first Model object in the SQLiteDB of kind.
    
    Useful when there is a single row in a table that just holds an array of other Model objects.
    
    :param: kind Model() class to poll.
    */
    public func firstInstanceOf(kind: Model) -> Model! {
        if let first = db.query("SELECT * FROM \(kind.className())").first {
            var instance = kind.self
            instance.copyFrom(first)
            return instance
        }
        return nil
    }
    
    /**
    First Model object in the SQLiteDB that matches some parameters.
    
    :param: kind Model() class to poll.
    :param: whereProperty Property name to match.
    :param: equals Property value to match.
    */
    public func firstInstanceOf(kind: Model, whereProperty: String, equals: AnyObject) -> Model! {
        if let firstModel = self.instancesOf(kind, whereProperty: whereProperty, equals: equals).first {
            return firstModel
        }
        return nil
    }
    
    /**
    Array of all Model objects in the SQLiteDB of kind.
    
    :param: kind Model() class to poll.
    */
    public func allInstancesOf(kind: Model) -> [Model] {
        var models: [Model] = []
        let savedModels = db.query("SELECT * FROM \(kind.className())")
        for row in savedModels {
            var instance = kind.self
            instance.copyFrom(row)
            models.append(instance)
        }
        return models
    }
    
    /**
    Array of Model objects in the SQLiteDB that match some parameters.
    
    :param: kind Model() class to poll.
    :param: whereProperty Property name to match.
    :param: equals Property value to match.
    */
    public func instancesOf(kind: Model, whereProperty: String, equals: AnyObject) -> [Model] {
        var models: [Model] = []
        let savedModels = db.query(kind.selectCommand(whereProperty, equals: equals))
        for row in savedModels {
            var instance = kind.self
            instance.copyFrom(row)
            models.append(instance)
        }
        return models
    }
    
    /**
    The number of Model objects in the SQLiteDB of kind.
    
    :param: kind Model() class to poll.
    */
    public func countInstancesOf(kind: Model) -> Int {
        if let count: AnyObject = db.query("SELECT COUNT(*) FROM \(kind.className())").first?["COUNT(*)"]?.value {
            return count as Int
        }
        return -1
    }
    
    /**
    Update SQLiteDB with properties of table object.
    
    :param: table Model object to poll for updates.
    :param: whereProperty Property name to match.
    :param: equals Property value to match.
    */
    public func update(table: Model, onRowsWhere: String, equals: AnyObject) {
        if table.shouldUpdate() {
            db.execute(table.updateCommmand(onRowsWhere, equals: equals))
        }
    }
    
    // MARK: - Schema Versioning
    
    /**
    Current schema version of database.
    */
    internal func schemaVersion() -> Int {
        db.execute("CREATE TABLE IF NOT EXISTS Schema (version INTEGER PRIMARY KEY NOT NULL);")
        let version: AnyObject! = db.query("SELECT version FROM Schema;").first?["version"]?.value!
        if let versionNumber = version as? Int {
            return versionNumber
        } else {
            db.execute("INSERT INTO Schema VALUES (0);")
            return 0
        }
    }
    
    /**
    Increment schema version of database.
    */
    internal func incrementSchemaVersion() {
        let versionNumber = self.schemaVersion()
        db.execute("UPDATE Schema SET version = \(versionNumber+1);")
    }
    
}